/* eslint-disable no-underscore-dangle */
const _FOR_INTERNAL_USE_ONLY_ = `@@@__#_FOR_INTERNAL_PURPOSE_ONLY_#__@@@`;
const _USE_TYPE_ = `@@@__#_USE_TYPE___@#@__#_USE_TYPE___@@@`;
const GET_INITIAL_PROPS_DEFAULT = 'getInitialProps';
const TAKE_EVERY = 'every';
const IS_DEBOUNCE_API_CALL = 'is_debounce_api_call';
const DEBOUNCE_API_CALL_DELAY_IN_MS = 'debounce_api_call_delay';
const ON_CANCEL_ERROR = 'API_CANCEL_ERROR';
const ON_ERROR = 'ERROR';
const ON_SUCCESS = 'SUCCESS';
const ON_FINALLY = 'FINALLY';
const ON_CANCEL = 'CANCEL';
const ON_REQUEST = 'REQUEST';
const ON_LOADING = 'LOADING';
const ON_UNMOUNT = 'UNMOUNT';
const ON_TOAST = 'TOAST';
const ERROR = 'ERROR';
const SUCCESS = 'SUCCESS';
const CALL = 'CALL';
const CANCEL = 'CANCEL';
const CUSTOM = 'CUSTOM_TASK';
const INFINITE_DATA_HANDLER = 'Infinite-Handler';
const DATA_HANDLER = 'Data-Handler';
const DELETE_DATA_HANDLER = 'Delete-Handler';
const UPDATE_DATA_HANDLER = 'Update-Handler';
const UPDATE_DATA_KEY_HANDLER = 'Update-Key-Handler';
const DELETE_DATA_KEY_HANDLER = 'Delete-Key-Handler';
const TOGGLE_DATA_KEY_HANDLER = 'Toggle-Key-Handler';
const SPLICE_DATA_HANDLER = 'Splice-Data-Handler';
const CALLBACK_HANDLER = 'Callback-Handler';
const RESET_HANDLER = 'Reset-Handler';
const TOAST_HANDLER = 'Toast-Handler';
const ERROR_HANDLER = 'Error-Handler';
const LOADER_HANDLER = 'Loading-Handler';
const DONT_UPDATE_DATA_HANDLER = "Don't-Update-Data-Handler";
const TYPE_NULL = 'null';
const TYPE_UNDEFINED = 'undefined';
const TYPE_STRING = 'string';
const TYPE_ARRAY = 'array';
const TYPE_BOOLEAN = 'boolean';
const TYPE_OBJECT = 'object';
const TYPE_FUNCTION = 'function';
const TYPE_ERROR = 'error';
const TYPE_SYMBOL = 'symbol';
const TYPE_GENERATOR_FUNCTION = 'generatorFunction';
const FOR_INTERNAL_USE_ONLY = _FOR_INTERNAL_USE_ONLY_;
const USE_TYPE = _USE_TYPE_;
const HANDLERS = 'handlers';
const NEXT_JS = 'nextJS';
const CREATE_REDUCER = 'createReducer';
const USE_HOOK = 'useHook';
const USE_HOC_HOOK = 'useHocHook';
const HOOK_WITH_HOC = 'hookWithHoc';
const ALLOW_MAP_STATE_TO_PROPS = 'mapStateToProps';
const GET_INITIAL_PROPS_KEY = 'getInitialPropsKey';
const IS_DEVELOPMENT = 'isDevelopment';
const HOC_MAIN_CONFIG_KEY = {
  HANDLERS,
  NEXT_JS,
  CREATE_REDUCER,
  USE_HOOK,
  USE_HOC_HOOK,
  HOOK_WITH_HOC,
  ALLOW_MAP_STATE_TO_PROPS,
  GET_INITIAL_PROPS_KEY,
  IS_DEVELOPMENT,
  USE_TYPE
};
const HOC_MAIN_CLIENT_SIDE_CONFIG_DEFAULT = {
  [HANDLERS]: [],
  [NEXT_JS]: false,
  [USE_HOOK]: false,
  [USE_HOC_HOOK]: true,
  [HOOK_WITH_HOC]: false,
  [ALLOW_MAP_STATE_TO_PROPS]: false,
  [GET_INITIAL_PROPS_KEY]: null,
  [IS_DEVELOPMENT]: false,
  [USE_TYPE]: FOR_INTERNAL_USE_ONLY,
  [GET_DEFAULT_CONFIG]: false
};
const HOC_MAIN_SERVER_SIDE_CONFIG_DEFAULT = {
  [HANDLERS]: [],
  [NEXT_JS]: true,
  [USE_HOOK]: false,
  [USE_HOC_HOOK]: false,
  [HOOK_WITH_HOC]: false,
  [ALLOW_MAP_STATE_TO_PROPS]: false,
  [GET_INITIAL_PROPS_KEY]: GET_INITIAL_PROPS_DEFAULT,
  [IS_DEVELOPMENT]: false,
  [USE_TYPE]: FOR_INTERNAL_USE_ONLY,
  [GET_DEFAULT_CONFIG]: false
};
const API_END_POINTS = 'apiEndPoints';
const INITIAL_STATE = 'initialState';
const GET_DEFAULT_CONFIG = 'getDefaultConfig';
const DONT_RESET_REDUCER_KEYS = 'dontReset';
const IS_MOBILE = 'isMobile';
const SAGA = 'saga';
const SAGA_CONSTANT = 'constantSaga';
const REDUCER_CONSTANT = 'constantReducer';
const REDUCER = 'reducer';
const AXIOS_INTERCEPTORS = 'axiosInterceptors';
const REDUCER_NAME = 'name';
const HOC_INITIAL_CONFIG_KEY = {
  API_END_POINTS,
  INITIAL_STATE,
  GET_DEFAULT_CONFIG,
  DONT_RESET_REDUCER_KEYS,
  IS_MOBILE,
  SAGA,
  SAGA_CONSTANT,
  REDUCER_CONSTANT,
  REDUCER,
  AXIOS_INTERCEPTORS,
  USE_HOOK,
  REDUCER_NAME
};
const COMMON_TASKS = {
  TASK_NAME: 'name',
  SUB_KEYS_ARRAY: 'subKey',
  IS_CLEAR_PREVIOUS_DATA_ON_SUCCESS: 'clearData',
  IS_CLEAR_PREVIOUS_DATA_ON_API_START: 'clearDataOnStart'
};
const DONT_UPDATE_RESPONSE_DATA = 'dontUpdateResponseData';
const DONT_UPDATE_SUCCESS_DATA = 'dontUpdateSuccessData';
const UPDATE_CALLBACK = 'updateCallback';
const ID_REFERENCE_KEY = 'key';
const IDS = 'id';
const API_TASK_CONFIG_KEYS = {
  TASKS: 'tasks',
  TASK: {
    KEY: 'task',
    COMMON_TASK_KEYS: COMMON_TASKS,
    INFINITE_DATA_HANDLER: {
      ...COMMON_TASKS,
      LIMIT: 'limit',
      IS_APPEND_DATA_ON_TOP: 'isAppendTop',
      SET_INFINITE_END_KEY_TRUE_OR_FALSE: 'setInfiniteEnd',
      UPDATE_CALLBACK
    },
    DATA_HANDLER: {
      ...COMMON_TASKS,
      UPDATE_CALLBACK
    },
    DELETE_DATA_HANDLER: {
      ...COMMON_TASKS,
      ID_REFERENCE_KEY,
      IDS
    },
    UPDATE_DATA_HANDLER: {
      ...COMMON_TASKS,
      ID_REFERENCE_KEY,
      IDS,
      UPDATE_CALLBACK,
      DONT_UPDATE_RESPONSE_DATA,
      DONT_UPDATE_SUCCESS_DATA
    },
    UPDATE_DATA_KEY_HANDLER: {
      ...COMMON_TASKS,
      ID_REFERENCE_KEY,
      IDS,
      UPDATE_CALLBACK,
      DONT_UPDATE_RESPONSE_DATA,
      DONT_UPDATE_SUCCESS_DATA
    },
    DELETE_DATA_KEY_HANDLER: {
      ...COMMON_TASKS,
      ID_REFERENCE_KEY,
      IDS,
      UPDATE_CALLBACK,
      DELETE_KEYS_ARRAY: 'deleteKey'
    },
    TOGGLE_DATA_KEY_HANDLER: {
      ...COMMON_TASKS,
      ID_REFERENCE_KEY,
      IDS,
      UPDATE_CALLBACK,
      TOGGLE_KEYS_ARRAY: 'toggleKey'
    },
    SPLICE_DATA_HANDLER: {
      ...COMMON_TASKS,
      UPDATE_CALLBACK,
      SPLICE_VALUE_ARRAY: 'spliceKey'
    },
    RESET_HANDLER: {
      TASK_NAME: COMMON_TASKS.TASK_NAME
    },
    CALLBACK_HANDLER: {
      TASK_NAME: COMMON_TASKS.TASK_NAME,
      CALLBACK_FUNCTION: 'callback'
    },
    TOAST_HANDLER: {
      TASK_NAME: COMMON_TASKS.TASK_NAME,
      TOAST_OBJECT: 'toast'
    },
    ERROR_HANDLER: {
      TASK_NAME: COMMON_TASKS.TASK_NAME,
      ERROR_OBJECT: 'error',
      IS_ERROR: 'isError'
    },
    LOADER_HANDLER: {
      TASK_NAME: COMMON_TASKS.TASK_NAME,
      IS_LOADING: 'loader'
    },
    DONT_UPDATE_DATA_HANDLER: {
      ...COMMON_TASKS
    }
  },
  FILTER_ARRAY: 'filter',
  DONT_UPDATE_REUCER: 'dontUpdateReducer',
  EXECUTE_UPDATE_STATE_CALLBACK_ON_ERROR: 'excuteUpdateStateCallbackOnError',
  UPDATE_STATE_DATA_REDUCER_KEYS: 'updateDataReducerKey',
  SET_PROXY_FOR: 'proxyFor',
  REQUEST: {
    KEY: 'request',
    ASYNC_FUNCTION: 'asyncFunction',
    ASYNC_FUNCTION_PARAMS_ARRAY: 'asyncFunctionParams',
    PAYLOAD: 'payload',
    PARAMS: 'params',
    QUERY: 'query',
    DELAY_FUNCTION: 'delayFunction',
    DONT_UPDATE_REDUCER_ON_SUCCESS: 'dontUpdateReducerOnSucess',
    DONT_UPDATE_REDUCER_ON_ERROR: 'dontUpdateReducerOnError',
    AXIOS_INTERCEPTOR: 'axios',
    PARAM_SERIALIZER: 'paramsSerializer',
    API_CANCEL_KEY: 'cancelKey',
    ON_CANCEL_TASK: 'onCancelTask',
    AXIOS_CONFIG: 'axiosConfig',
    API_QUERY_CACHE_KEY: 'key',
    USE_CACHE_DATA: 'useCache',
    IS_ERROR_DATA_HANDLING: 'errorDataHandling',
    IS_CLEAR_DATA_ON_ERROR: 'clearDataOnError',
    IS_POLLING: 'polling',
    IS_ERROR_PARSER: 'errorParser',
    DEFAULT_ERROR_PARSER_FUNCTION: 'defaultErrorParser',
    POLLING_DELAY_COUNT_IN_MS: 'delay',
    MAX_RETRY_COUNT: 'retry',
    POLLING_MAX_COUNT: 'pollingCount',
    START_POLLING_AFTER_DELAY: 'callAfterDelay'
  },
  CALLBACK: {
    KEY: 'callback',
    UPDATE_STATE_CALLBACK: 'updateStateCallback',
    SUCCESS_CALLBACK: 'successCallback',
    ERROR_CALLBACK: 'errorCallback',
    SUCCESS_CALLBACK_EXECUTE_AFTER_100_MILLISECONDS: 'logoutCallback',
    FINAL_CALLBACK: 'finalCallback',
    POLLING_CALLBACK: 'pollingCallback',
    CANCEL_CALLBACK: 'cancelCallback',
    UPDATE_CALLBACK
  }
};
const USE_QUERY_REDUCER_CONFIG_KEYS = {
  PARENT_KEY: 'key',
  REDUCER_KEY: 'key',
  REQUIRED_DATA_KEY: 'requiredKey',
  FILTER_ARRAY: 'filter',
  QUERY_DATA_STRING_OR_ARRAY: 'initialLoaderqueryState',
  INITIAL_LOADER_STATE: 'initialLoaderState',
  GET_DEFAULT_DATA_FORMAT: 'defaultDataFormat',
  DEFAULT_DATA_OR_FORMAT: 'default'
};
const USE_QUERY_CONFIG_KEYS = {
  REDUCER_NAME: 'reducerName',
  REDUCER_KEYS_ARRAY_OR_OBJECT_OR_STRING: USE_QUERY_REDUCER_CONFIG_KEYS,
  REDUCER_KEYS_CONFIG: 'config',
  CALLBACK_FUNCTION_RETURN_DATA: 'callback',
  TRIGGER_AFTER_CALLBACK_NO_DATA_RETURN: 'callbackSuccess',
  REFRESH_KEY: 'refreshKey'
};
const API_END_POINTS_CONFIG_KEYS = {
  API_URL: 'url',
  AXIOS_INTERCEPTORS: 'axios',
  API_METHOD: 'method',
  API_RESPONSE_SUCCESS_STATUS_CODE_KEY: 'responseStatusCodeKey',
  API_RESPONSE_SUCCESS_STATUS_CODES: 'responseStatusCode',
  API_RESPONSE_SUCCESS_MESSAGE_KEY: 'responseMessageKey',
  API_RESPONSE_SUCCESS_DATA_KEY: 'responseDataKey',
  API_RESPONSE_ERROR_DATA_KEY: 'errorDataKey',
  API_RESPONSE_ERROR_STATUS_CODE_KEY: 'errorStatusKey',
  API_RESPONSE_ERROR_MESSAGE_KEY: 'errorMessageKey',
  API_ERROR_HANDLER_STATUS_CODES: 'errorHandlerStatusCode',
  DEBOUNCE_API_CALL_DELAY_IN_MS,
  IS_DEBOUNCE_API_CALL,
  SAGA_EFFECT: 'effect'
};
const API_END_POINTS_CONFIG_DEFAULT_VALUE = {
  API_URL: undefined,
  AXIOS_INTERCEPTORS: undefined,
  API_METHOD: 'GET',
  API_RESPONSE_SUCCESS_STATUS_CODE_KEY: '',
  API_RESPONSE_SUCCESS_STATUS_CODES: [],
  API_RESPONSE_SUCCESS_MESSAGE_KEY: '',
  API_RESPONSE_SUCCESS_DATA_KEY: '',
  API_RESPONSE_ERROR_DATA_KEY: 'error',
  API_RESPONSE_ERROR_STATUS_CODE_KEY: '',
  API_RESPONSE_ERROR_MESSAGE_KEY: '',
  API_ERROR_HANDLER_STATUS_CODES: [],
  SAGA_EFFECT: 'latest'
};
const API_METHODS = {
  GET: 'GET',
  REQUEST: 'REQUEST',
  DELETE: 'DELETE',
  HEAD: 'HEAD',
  OPTIONS: 'OPTIONS',
  POST: 'POST',
  PUT: 'PUT',
  PATCH: 'PATCH'
};
const ENV = {
  DEVELOPMENT: 'development',
  PRODUCTION: 'production'
};
const hocConstants = {
  HOC_MAIN_CLIENT_SIDE_CONFIG_DEFAULT,
  HOC_MAIN_SERVER_SIDE_CONFIG_DEFAULT,
  HOC_INITIAL_CONFIG_KEY,
  HOC_MAIN_CONFIG_KEY,
  FOR_INTERNAL_USE_ONLY,
  USE_TYPE,
  API_METHODS,
  ENV
};
const commonConstants = {
  TAKE_EVERY,
  API_END_POINTS_CONFIG_DEFAULT_VALUE,
  API_END_POINTS_CONFIG_KEYS,
  USE_QUERY_CONFIG_KEYS,
  API_TASK_CONFIG_KEYS,
  ENVIRONMENT_TYPE: ENV,
  /* Don't Change any key */
  INFINITE_DATA_HANDLER,
  DATA_HANDLER,
  DELETE_DATA_HANDLER,
  UPDATE_DATA_HANDLER,
  UPDATE_DATA_KEY_HANDLER,
  DELETE_DATA_KEY_HANDLER,
  TOGGLE_DATA_KEY_HANDLER,
  SPLICE_DATA_HANDLER,
  RESET_HANDLER,
  CALLBACK_HANDLER,
  TOAST_HANDLER,
  ERROR_HANDLER,
  LOADER_HANDLER,
  DONT_UPDATE_DATA_HANDLER,
  /* Don't Change any key */
  ON_CANCEL_ERROR,
  ON_ERROR,
  ON_SUCCESS,
  ON_FINALLY,
  ON_CANCEL,
  ON_REQUEST,
  ON_LOADING,
  ON_UNMOUNT,
  ON_TOAST,
  ERROR,
  SUCCESS,
  CALL,
  CANCEL,
  CUSTOM,
  TYPE_NULL,
  TYPE_UNDEFINED,
  TYPE_STRING,
  TYPE_ARRAY,
  TYPE_BOOLEAN,
  TYPE_OBJECT,
  TYPE_FUNCTION,
  TYPE_ERROR,
  TYPE_SYMBOL,
  TYPE_GENERATOR_FUNCTION
};

const {
  API_END_POINTS_CONFIG_DEFAULT_VALUE: API_END_POINTS_CONFIG_DEFAULT_VALUE$1,
  API_END_POINTS_CONFIG_KEYS: API_END_POINTS_CONFIG_KEYS$1,
  USE_QUERY_CONFIG_KEYS: USE_QUERY_CONFIG_KEYS$1,
  API_TASK_CONFIG_KEYS: API_TASK_CONFIG_KEYS$1,
  INFINITE_DATA_HANDLER: INFINITE_DATA_HANDLER$1,
  DATA_HANDLER: DATA_HANDLER$1,
  DELETE_DATA_HANDLER: DELETE_DATA_HANDLER$1,
  UPDATE_DATA_HANDLER: UPDATE_DATA_HANDLER$1,
  UPDATE_DATA_KEY_HANDLER: UPDATE_DATA_KEY_HANDLER$1,
  DELETE_DATA_KEY_HANDLER: DELETE_DATA_KEY_HANDLER$1,
  TOGGLE_DATA_KEY_HANDLER: TOGGLE_DATA_KEY_HANDLER$1,
  SPLICE_DATA_HANDLER: SPLICE_DATA_HANDLER$1,
  RESET_HANDLER: RESET_HANDLER$1,
  CALLBACK_HANDLER: CALLBACK_HANDLER$1,
  TOAST_HANDLER: TOAST_HANDLER$1,
  ERROR_HANDLER: ERROR_HANDLER$1,
  LOADER_HANDLER: LOADER_HANDLER$1,
  DONT_UPDATE_DATA_HANDLER: DONT_UPDATE_DATA_HANDLER$1,
  ON_CANCEL_ERROR: ON_CANCEL_ERROR$1,
  ON_ERROR: ON_ERROR$1,
  ON_SUCCESS: ON_SUCCESS$1,
  ON_FINALLY: ON_FINALLY$1,
  ON_CANCEL: ON_CANCEL$1,
  ON_REQUEST: ON_REQUEST$1,
  ON_LOADING: ON_LOADING$1,
  ON_UNMOUNT: ON_UNMOUNT$1,
  ON_TOAST: ON_TOAST$1,
  ERROR: ERROR$1,
  SUCCESS: SUCCESS$1,
  CALL: CALL$1,
  CANCEL: CANCEL$1,
  CUSTOM: CUSTOM$1,
  TYPE_NULL: TYPE_NULL$1,
  TYPE_UNDEFINED: TYPE_UNDEFINED$1,
  TYPE_STRING: TYPE_STRING$1,
  TYPE_ARRAY: TYPE_ARRAY$1,
  TYPE_BOOLEAN: TYPE_BOOLEAN$1,
  TYPE_OBJECT: TYPE_OBJECT$1,
  TYPE_FUNCTION: TYPE_FUNCTION$1,
  TYPE_ERROR: TYPE_ERROR$1,
  TYPE_SYMBOL: TYPE_SYMBOL$1,
  TYPE_GENERATOR_FUNCTION: TYPE_GENERATOR_FUNCTION$1,
  TAKE_EVERY: TAKE_EVERY$1
} = commonConstants;

export { API_END_POINTS_CONFIG_DEFAULT_VALUE$1 as API_END_POINTS_CONFIG_DEFAULT_VALUE, API_END_POINTS_CONFIG_KEYS$1 as API_END_POINTS_CONFIG_KEYS, API_METHODS, API_TASK_CONFIG_KEYS$1 as API_TASK_CONFIG_KEYS, CALL$1 as CALL, CALLBACK_HANDLER$1 as CALLBACK_HANDLER, CANCEL$1 as CANCEL, CUSTOM$1 as CUSTOM, DATA_HANDLER$1 as DATA_HANDLER, DELETE_DATA_HANDLER$1 as DELETE_DATA_HANDLER, DELETE_DATA_KEY_HANDLER$1 as DELETE_DATA_KEY_HANDLER, DONT_UPDATE_DATA_HANDLER$1 as DONT_UPDATE_DATA_HANDLER, ENV, ERROR$1 as ERROR, ERROR_HANDLER$1 as ERROR_HANDLER, FOR_INTERNAL_USE_ONLY, HOC_INITIAL_CONFIG_KEY, HOC_MAIN_CLIENT_SIDE_CONFIG_DEFAULT, HOC_MAIN_CONFIG_KEY, HOC_MAIN_SERVER_SIDE_CONFIG_DEFAULT, INFINITE_DATA_HANDLER$1 as INFINITE_DATA_HANDLER, LOADER_HANDLER$1 as LOADER_HANDLER, ON_CANCEL$1 as ON_CANCEL, ON_CANCEL_ERROR$1 as ON_CANCEL_ERROR, ON_ERROR$1 as ON_ERROR, ON_FINALLY$1 as ON_FINALLY, ON_LOADING$1 as ON_LOADING, ON_REQUEST$1 as ON_REQUEST, ON_SUCCESS$1 as ON_SUCCESS, ON_TOAST$1 as ON_TOAST, ON_UNMOUNT$1 as ON_UNMOUNT, RESET_HANDLER$1 as RESET_HANDLER, SPLICE_DATA_HANDLER$1 as SPLICE_DATA_HANDLER, SUCCESS$1 as SUCCESS, TAKE_EVERY$1 as TAKE_EVERY, TOAST_HANDLER$1 as TOAST_HANDLER, TOGGLE_DATA_KEY_HANDLER$1 as TOGGLE_DATA_KEY_HANDLER, TYPE_ARRAY$1 as TYPE_ARRAY, TYPE_BOOLEAN$1 as TYPE_BOOLEAN, TYPE_ERROR$1 as TYPE_ERROR, TYPE_FUNCTION$1 as TYPE_FUNCTION, TYPE_GENERATOR_FUNCTION$1 as TYPE_GENERATOR_FUNCTION, TYPE_NULL$1 as TYPE_NULL, TYPE_OBJECT$1 as TYPE_OBJECT, TYPE_STRING$1 as TYPE_STRING, TYPE_SYMBOL$1 as TYPE_SYMBOL, TYPE_UNDEFINED$1 as TYPE_UNDEFINED, UPDATE_DATA_HANDLER$1 as UPDATE_DATA_HANDLER, UPDATE_DATA_KEY_HANDLER$1 as UPDATE_DATA_KEY_HANDLER, USE_QUERY_CONFIG_KEYS$1 as USE_QUERY_CONFIG_KEYS, USE_TYPE, commonConstants, hocConstants };
